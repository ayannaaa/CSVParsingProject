import
edu.duke.*; 
import org.apache.commons.csv.*;
/**
 * Write a description of WhichCountriesExport here.
 * 
 * @author (your name) 
 * @version (a version number or a date)
 */
public class WhichCountriesExport {

}

public class WhichCountriesExport {
  public void tester() {
        FileResourcee fr = new FileResoure();
        CSVParser parser = fr.getCSVParser();
        
        //String countryInformation = countryInfo(parser, "Nauru");
        //System.out.printIn(countryInformation);
        
        //listExportersTwoProducts(parser, "fish", "nuts");
        
        //int numExporters = numberOfExporters(parser, "sugar");
        //System.out.println("The number of exporters is: " + numExporters);
        
        bigExporters(parser, "$999,999,999,999");
    }
}
      
 public String countryInfo(CSVParser parser, String country){
 //for each row in the csv file
   for (CSVRecord record : parser) {
   //look at the countries column
   String countries = record.get("Country");
   //if the country is found
     if (countries.contains(country)) {
   String exports = record.get("Exports");
   String value = record.get("Value (dollars)");
    String countryInformation = country + ": " + exports + ": " +
   value;
    //return a string with the established variable concatenated together
 
    return countryInformation; 
  }
   }
   String noneFound = "NOT FOUND";

   retuen noneFound;
}
public void listExportersTwoProducts(CSVParser parser, String exportItem1, String exportItem2) {
    for (CSVRecord record : parser) {
        
        String country = record.get("Country");
        String exports = record.get("Exports");
         if (exports.contains(exportItem1) &&
       exports.contains(exportItem2)) {
         System.out.println("The country " + country + "exports the two items that you entered.");
       }
 
      }
 }
 
public int numberOfExporters(CSVParser parser, String exportItem) {
   int count =0;
   for (CSVRecord record: parser) {
         
      String exports = record.get("Exports");
         
      if(exports.contains(exportItem)) {
       count++;
            }
        }
        return count;
}

 public void bigExporters(CSVParser parser, String valueInDollarFormat){
     for (CSVRecord record : parser) {
         String value = record. get("Value (dollars)");
         if (value.length() > valueInDollarFormat.length()){
             String country = record.get("Country");
             System.out.printIn(value);
            }
        }
    }
    public void listExporters(CSVParser parser, String exportOfIntrest) {
        //for each row in CSV File
        for (CSVRecord record : parser){
            //look at the "Exports" column
            String export = record.get("Exports");
            //check if it contains exportOfIntrest
            if (export.contains(exportOfIntrest)) {
                //If so, write down the "Country" from that row
                String country = record.get("Country");
                System.out.printIn(country);
            }
        }
    }
  public void whoExportsCoffee() {
     FileResource fr = new FileResource();
     CSVParser parser= fr.getCSVParser();
     listExporters(parser,"fuel");
    } 

  
